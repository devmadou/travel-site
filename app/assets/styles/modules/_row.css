.row{

    /* This CSS selector will add a blank space after all
    the content in the main 'row' div
    */
    @mixin clearFix;

    &__b-margin-until-medium{
        margin-bottom: 1rem;
    }

    &--t-padding{
        padding-top: 80px;
    }

    @mixin atMedium{

        &--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */
        &--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        &--gutters-large{
            margin-right: -100px;
        }

        &--gutters-large > div{
            padding-right: 100px;
        }

        &--gutters-small{
            margin-right: -45px;
        }

        &--gutters-small > div{
            padding-right: 45px;
        }

        &__b-margin-until-medium{
            /*
            When the size is >= to medium, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }

        /* The image takes 1 third of the page */
        &__medium-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;
            
            &--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }

        }

        /* The image takes 2 third of the page */
        &____medium-8{
            float: left;
            width: 66.66%;

            &--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        }

        &__medium-6{
            float: left;
            width: 50%;
        }
    }

    @mixin atLarge{

        &--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */
        &--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        &--gutters-large{
            margin-right: -100px;
        }

        &--gutters-large > div{
            padding-right: 100px;
        }

        &--gutters-small{
            margin-right: -45px;
        }

        &--gutters-small > div{
            padding-right: 45px;
        }

        &__b-margin-until-large{
            /*
            When the size is >= to large, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }

        /* The image takes 1 third of the page */
        &__large-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;
            
            &--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }

        }

        /* The image takes 2 third of the page */
        &____large-8{
            float: left;
            width: 66.66%;

            &--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        }

        &__large-6{
            float: left;
            width: 50%;
        }
    }

    /* Begin Equal Height Rules */
    &--equal-height-at-medium{
        @mixin atMedium{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: flex;
        }

        /*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */
        & > div{
            float: none;
            display: flex;
        }
    }

    &--equal-height-at-large{
        @mixin atLarge{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: flex;
        }

        /*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */
        & > div{
            float: none;
            display: flex;
        }
    }
}