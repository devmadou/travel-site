/*
Only contains the imports
*/

/*
Beginning a file with an underscore tells the developers to consider this file
a PARTIAL file not designed to be used on its own
It is intended to be imported
*/

/*
We can even import CSS packages installed with node like 'normalize.css'
the same way we would import classic CSS files (like the other imports)
*/

/*
normalize:
normalize.css is an alternative to CSS Reset
It adjusts the styles of certain elements in an effort to make all web browsers
render things more consistently
You can see a tiny margin appearing on each side of the site when applying it
*/

/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */

html {
  line-height: 1.15; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */

article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */

figcaption,
figure,
main { /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */

figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */

a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input { /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select { /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */

button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */

details, /* 1 */
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 */

canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */

template {
  display: none;
}

/* Hidden
   ========================================================================== */

/**
 * Add the correct display in IE 10-.
 */

[hidden] {
  display: none;
}

/*
This mixin is used to clear any floating element (text, image, ...)
*/

body{
  font-family: 'Roboto', sans-serif;
  color: #333;
}

/*
So we don't get images too large that extend the width of the screen device
*/

img{
  max-width: 100%;
  height: auto;
}

*{
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

/*
Let's be honest, the default blue color is just crap!
Let's give all our links a cool color of orange :)
*/

a{
  color: #d59541;
}

/*
Beginning a file with an underscore tells the developers to consider this file
a PARTIAL file not designed to be used on its own
It is intended to be imported
*/

/*
***
BEM
***

B: Block    --> class="block"
A block is an independent resusable part of our design

E: Element  --> class="block__element"
An element belongs to a block. It cannot be used outside of the block it belongs to

M: Modifier   --> class="block__element--modifier"
A modifier can be used on a block or an element to indicate a change
to the default state of an object
*/

/*
*****
Yrem;
*****

rem refers to the default font size of the root <html> element
Thus, applying a font size of 1.5rem will multiply the default <html> font size by 1.5
Most web browsers will have a default font size of the <html> element of 16 pixels
(1.5 rem is equal to 1.5 * 16 = 24px)

The beauty in that is that it allows developers to honor the font size
of the user's device which can change (mobile, desktop, tablet)
Using rem will scale accordingly to the user's font-size preference

You can also measure the size of a letter to get the font in pixel
then divide the result by 16 so you get the value in rem
You can also apply this trick to block width:
For example, you need a block to be 480px, you can put instead (480px / 16px) rem
so it adapts automatically whatever the screen size

*/

.large-hero{
  position: relative;
  border-bottom: 10px solid #2f5572;

}

.large-hero__image{
    /*
    When creating an image, the browser treats it as a default inline element
    as if the element was similar to a text
    This means, it will leave a little margin (some room)
    for characters that have let say a 'bottom part'
    like (p, g, y, ...)
    Specifying the image as a block will remove that little margin
    */
    display: block;
  }

.large-hero__text-content{
    position: absolute;
    left: 0;
    /* width and text-align just to center the text horizontally */
    width: 100%;
    text-align: center;
    top: 50%;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);  /* Translate if to half of its own height, a negative value pulls it up */
  }

.large-hero__title{
    font-weight: 300;
    color: #2f5572;
    margin: 0;
    font-size: 2.4rem;

    /*
    In the mobile first philisophy, we treat the mobile view as the baseline
    and modify things from there as necessary
    */

  }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.large-hero__title{
      font-size: 4.8rem

  }
  }

.large-hero__subtitle{
    font-weight: 300;
    color: #2f5572;
    font-size: 1.5rem;
    margin: 0;
  }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.large-hero__subtitle{
      font-size: 2.9rem
  }
  }

.large-hero__description{
    color: #FFF;
    font-size: 1.1rem;
    font-weight: 100;
    text-shadow: 2px 2px 0 rgba(0, 0, 0, .1);
    max-width: 30rem;
    margin-left: auto;
    margin-right: auto;
  }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.large-hero__description{
      font-size: 1.875rem
  }
  }

/*
We gave the main '.btn' element the display 'inline-block' because we gave it padding
That way, its parent and surrounding elements will be aware of its vertical padding
*/

.btn{
  background-color: #2f5572;
  color: #FFF;
  text-decoration: none;
  padding: .75rem 1.2rem;
  display: inline-block;
  
}

.btn--orange{
    background-color: #d59541;
  }

.btn--large{
    /* We do not specify any font-size so it will default to 1 for tiny screens*/
    padding: 1.1rem 1.9rem;
    
  }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.btn--large{
      font-size: 1.25rem
    
  }
  }

/*
This file is designed to create padding on each side of the element it is applied to
The main idea is that instead of applying padding to a single element individually,
we use that .wrapper class that will be in charge of centralizing the CSS code
used for applying padding to ANY element (whole page or single item) of the page

On top of adding padding on the left and right side of the screen,
that wrapper class will also take care of limiting the maximum width
so we avoid having very long lines of text to read on larger screen

It also centers the content via margin-left and margin right set to auto
*/

.wrapper{
    padding-left: 18px;
    padding-right: 18px;
    /*The 'max-width' is applied so we avoid reading very long lines on the screen
    To take the padding from right and left into account so the image breathes better,
    by the way, the author used 1236px (so it takes the 2 times 18px padding added,
    no really useful I think...),
    as I have a smaller screen I will use a lower value instead
    */
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;

    overflow: hidden;
}

/* So we hide the negative -65px margin added to the right */

.wrapper--no-padding-until-medium{
        padding-left: 0;
        padding-right: 0;
    }

@media (min-width: 800px){

.wrapper--no-padding-until-medium{
            padding-left: 18px;
            padding-right: 18px
    }
  }

.wrapper--no-padding-until-large{
        padding-left: 0;
        padding-right: 0;
    }

@media (min-width: 1010px){

.wrapper--no-padding-until-large{
            padding-left: 18px;
            padding-right: 18px
    }
  }

.wrapper--medium{
        /* We make it a bit narrower, (decrease the width) */
        max-width: 976px;
    }

.wrapper .wrapper{
        /*
        We target every wrapper inside another wrapper
        The targeted elements should no longer have horizontal padding
        So it takes the whole sreen's width on mobile device
        */
        padding-left: 0;
        padding-right: 0;
    }

.wrapper--b-margin{
        margin-bottom: 1rem;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.wrapper--b-margin{
            margin-bottom: 3.875rem
    }
  }

/*
This class will have the responsability of adding top padding
and bottom padding to each section of the page
This is a design pattern that will be resused for several sections
(same as the 'wrapper' section)
*/

.page-section{
    padding: 1.2rem 0;
}

/* For mobile desktop size */

@media (min-width: 800px){

.page-section{
        padding: 4.5rem 0
}
  }

.page-section--no-b-padding-until-medium{
        padding-bottom: 0;
    }

@media (min-width: 800px){

.page-section--no-b-padding-until-medium{
            padding-bottom: 4.5rem
    }
  }

.page-section--no-b-padding-until-large{
        padding-bottom: 0;
    }

@media (min-width: 1010px){

.page-section--no-b-padding-until-large{
            padding-bottom: 4.5rem
    }
  }

.page-section--blue{
        background-color: #2f5572;
        color: #FFF;
    }

.page-section--testimonials{
        /*
        For small size screens, there is no need to use the background image and waste
        the user's data plan, we will just apply a nice background color instead
        */
        background-color: #e0e6ef;
    }

@media (min-width: 1010px){

.page-section--testimonials{
            /*
            We tell the image to be aligned towards the top of the section
            as well as center aligned plus no need to be repeated
            */
            background: url(/assets/images/testimonials-bg.jpg) top center no-repeat;
            /*
            'background-size' shrink or stretch the image to always be small or large enough
            to perfectly cover the containing div
            */
            background-size: cover
    }
  }

.headline{
    font-size: 1.9rem;
    font-weight: 300;
    color: #2f5572;
}

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.headline{
        font-size: 2.875rem
}
  }

.headline--centered{
        text-align: center;
    }

.headline--orange{
        color: #d59541;
    }

.headline--small{
        font-size: 1.2rem;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.headline--small{
            font-size: 1.875rem
    }
  }

.headline--narrow{
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }

.headline--light{
        font-weight: 100;
    }

.headline strong{
        font-weight: 400;
    }

.headline--b-margin-small{
        /* em is relative to the font-size of the element itself */
        margin-bottom: .5em;
    }

.headline--b-margin-large{
        margin-bottom: 1.6em;
    }

.headline--no-t-margin{
        margin-top: 0;
    }

/* This CSS selector will add a blank space after all
    the content in the main 'row' div
    */

.row::after{
    content: "";
    clear: both;
    display: table;     /* For browser support */
  }

.row__b-margin-until-medium{
        margin-bottom: 1rem;
    }

.row--t-padding{
        padding-top: 80px;
    }

@media (min-width: 800px){

.row{

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */

        /* The image takes 1 third of the page */

        /* The image takes 2 third of the page */
}

        .row--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }
        .row--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        .row--gutters-large{
            margin-right: -100px;
        }

        .row--gutters-large > div{
            padding-right: 100px;
        }

        .row--gutters-small{
            margin-right: -45px;
        }

        .row--gutters-small > div{
            padding-right: 45px;
        }

        .row__b-margin-until-medium{
            /*
            When the size is >= to medium, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }
        .row__medium-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;

        }
            
            .row__medium-4--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }
        .row____medium-8{
            float: left;
            width: 66.66%;

        }

            .row____medium-8--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        .row__medium-6{
            float: left;
            width: 50%;
        }
  }

@media (min-width: 1010px){

.row{

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */

        /* The image takes 1 third of the page */

        /* The image takes 2 third of the page */
}

        .row--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }
        .row--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        .row--gutters-large{
            margin-right: -100px;
        }

        .row--gutters-large > div{
            padding-right: 100px;
        }

        .row--gutters-small{
            margin-right: -45px;
        }

        .row--gutters-small > div{
            padding-right: 45px;
        }

        .row__b-margin-until-large{
            /*
            When the size is >= to large, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }
        .row__large-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;

        }
            
            .row__large-4--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }
        .row____large-8{
            float: left;
            width: 66.66%;

        }

            .row____large-8--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        .row__large-6{
            float: left;
            width: 50%;
        }
  }

/* Begin Equal Height Rules */

@media (min-width: 800px){

.row--equal-height-at-medium{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
  }

/*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */

.row--equal-height-at-medium > div{
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }

@media (min-width: 1010px){

.row--equal-height-at-large{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
  }

/*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */

.row--equal-height-at-large > div{
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }

/*
    We select each paragrah nested in that 'generic-content-container' element
    */

.generic-content-container p{
        /* There is more space between each line, actually, this property does not require any
        measurement unit like rem, em, px, ... */
        line-height: 1.65;
        margin: 0 0 1.8rem 0;
        font-size: 0.9rem;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.generic-content-container p{
            font-size: 1rem    /* The author applied 1.125rem which is too much for me... */
    }
  }

/*
    For any links that lives in a paragraph
    We could have nested that element into the previous 'p' rule
    (but the author does not like nesting that goes beyond 2 levels)
    */

.generic-content-container p a {
        /* By default, the font-weight is 100 */
        font-weight: 700;
    }

.section-title{
    /* Not the whole title should be bold so we lower the font weight a little */
    font-size: 2.4rem;
    font-weight: 300;
    text-align: center;
}

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.section-title{
        font-size: 3.75rem
}
  }

.section-title strong{
        font-weight: 500;
    }

.section-title__icon{
        /* 'block' will drop the text to a new line */
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: .6rem;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.section-title__icon{
            /* On larger screen, the text will sit next to the image */
            display: inline-block;
            margin-right: .8rem;
            margin-left: 0;
            margin-bottom: 0;
            /* This will push the icon down to 8px */
            position: relative;
            top: 8px
    }
  }

.section-title--blue{
        color: #2f5572;
    }

.feature-item{
    position: relative;
    padding-bottom: 2.5rem;
}

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.feature-item{
        padding-left: 94px
}
  }

/*
    We want the icon to be positionned in relation to its parent
    so we give the parent a position of 'relative' and the icon
    a position of 'absolute'
    */

.feature-item__icon{
        display: block;
        margin: 0 auto;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.feature-item__icon{
            position: absolute;
            left: 0
    }
  }

.feature-item__title{
        font-weight: 300;
        margin-top: .7rem;
        margin-bottom: .8rem;
        text-align: center;
    }

/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */

@media (min-width: 530px){

.feature-item__title{
            font-size: 1.875rem;
            margin-top: 1rem;
            text-align: left
    }
  }

.testimonial{
    /*
    The background color is a bit transparent
    (by the way, the 'a' in 'rgba' stands for alpha transparency)
    */
    background-color: rgba(255, 255, 255, .8);
    padding: 0 18px 1px 18px;
    margin-bottom: 98px;

}

.testimonial--last{
        margin-bottom: 0;
    }

/*
    Why the 1px padding on the bottom of the testimonial section?
    This is because the paragrah contained within a testimonial block has by default
    - a margin-top
    - a margin-bottom
    If we remove that padding, the margin-bottom disappears or in reality
    creates an overlap that goes beyond the white testimonial block and is thus unseen
    so we add some padding to the testimonial so the paragrah has something to push through
    */

@media (min-width: 1010px){

.testimonial{
        margin-bottom: 0;
        padding: 0 1.8125rem 1px 1.8125rem

}
  }

.testimonial__photo{
        border-radius: 80px;
        /*
        'overflow' is hiddent because we only see the left corners of the image getting rounded
        hiding the overflow crop the div to its exact content so we get to see the right hand corners
        */
        overflow: hidden;
        width: 160px;
        height: 160px;
        margin: 0 auto -80px auto;
        position: relative;
        /*
        We want the circle photo to violate the top div border
        but the titles and paragrah within the testimonial section will not move up
        that is why we add a negative '-80px' margin at the bottom of the image
        */
        top: -80px;
        border: 6px solid rgba(255, 255, 255, .8);
    }

.testimonial__title{
        color: #2f5572;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 500;
        margin: 0;
    }

.testimonial__subtitle{
        color: #d59541;
        text-align: center;
        font-weight: 400;
        font-size: 0.9375rem;
        margin: .25rem 0 1rem 0;
    }
