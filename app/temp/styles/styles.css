/*
Only contains the imports

Beginning a file with an underscore tells the developers to consider this file
a PARTIAL file not designed to be used on its own
It is intended to be imported

We can even import CSS packages installed with node like 'normalize.css'
the same way we would import classic CSS files (like the other imports)

normalize:
----------
normalize.css is an alternative to CSS Reset
It adjusts the styles of certain elements in an effort to make all web browsers
render things more consistently
You can see a tiny margin appearing on each side of the site when applying it
*/
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15; /* 1 */
  -ms-text-size-adjust: 100%; /* 2 */
  -webkit-text-size-adjust: 100%; /* 2 */
}
/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}
/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}
/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main { /* 1 */
  display: block;
}
/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}
/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent; /* 1 */
  -webkit-text-decoration-skip: objects; /* 2 */
}
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted; /* 2 */
}
/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}
/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}
/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}
/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}
/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}
/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}
/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input { /* 1 */
  overflow: visible;
}
/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select { /* 1 */
  text-transform: none;
}
/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"], /* 1 */
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; /* 2 */
}
/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}
/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block; /* 1 */
  vertical-align: baseline; /* 2 */
}
/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}
/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}
/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}
/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details, /* 1 */
menu {
  display: block;
}
/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}
/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}
/**
 * Add the correct display in IE.
 */
template {
  display: none;
}
/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}
/*
This mixin is used to clear any floating element (text, image, ...)
*/
body{
  font-family: 'Roboto', sans-serif;
  color: #333;
}
/*
So we don't get images too large that extend the width of the screen device
*/
img{
  max-width: 100%;
  height: auto;
}
*{
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}
/*
Let's be honest, the default blue color is just crap!
Let's give all our links a cool color of orange :)
*/
a{
  color: #d59541;
}
/*
Beginning a file with an underscore tells the developers to consider this file
a PARTIAL file not designed to be used on its own
It is intended to be imported
*/
/*
***
BEM
***

B: Block    --> class="block"
A block is an independent resusable part of our design

E: Element  --> class="block__element"
An element belongs to a block. It cannot be used outside of the block it belongs to

M: Modifier   --> class="block__element--modifier"
A modifier can be used on a block or an element to indicate a change
to the default state of an object
*/
/*
*****
Yrem;
*****

rem refers to the default font size of the root <html> element
Thus, applying a font size of 1.5rem will multiply the default <html> font size by 1.5
Most web browsers will have a default font size of the <html> element of 16 pixels
(1.5 rem is equal to 1.5 * 16 = 24px)

The beauty in that is that it allows developers to honor the font size
of the user's device which can change (mobile, desktop, tablet)
Using rem will scale accordingly to the user's font-size preference

You can also measure the size of a letter to get the font in pixel
then divide the result by 16 so you get the value in rem
You can also apply this trick to block width:
For example, you need a block to be 480px, you can put instead (480px / 16px) rem
so it adapts automatically whatever the screen size

*/
.large-hero{
  position: relative;
  border-bottom: 10px solid #2f5572;

}
.large-hero__image{
    /*
    When creating an image, the browser treats it as a default inline element
    as if the element was similar to a text
    This means, it will leave a little margin (some room)
    for characters that have let say a 'bottom part'
    like (p, g, y, ...)
    Specifying the image as a block will remove that little margin
    */
    display: block;
  }
.large-hero__text-content{
    padding-top: 88px;  /* Careful, this top padding is the exact same width as the 'CLEAR VIEW ESCAPES' site logo in the header so the content is still centered */
    position: absolute;
    left: 0;
    top: 50%;
    /* width and text-align just to center the text horizontally */
    width: 100%;
    text-align: center;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
  }
/* Translate if to half of its own height, a negative value pulls it up */
@media (min-width: 800px){
.large-hero__text-content{
      padding-top: 88px  /* Careful, this top padding is the exact same width as the BACKGROUND TRANSPARENT HEIGHT logo in the header so the content is still centered */
  }
  }
.large-hero__title{
    font-weight: 300;
    color: #2f5572;
    margin: 0;
    font-size: 2.4rem;

    /*
    In the mobile first philisophy, we treat the mobile view as the baseline
    and modify things from there as necessary
    */

  }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.large-hero__title{
      font-size: 4.8rem

  }
  }
.large-hero__subtitle{
    font-weight: 300;
    color: #2f5572;
    font-size: 1.5rem;
    margin: 0;
  }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.large-hero__subtitle{
      font-size: 2.9rem
  }
  }
.large-hero__description{
    color: #FFF;
    font-size: 1.1rem;
    font-weight: 100;
    text-shadow: 2px 2px 0 rgba(0, 0, 0, .1);
    max-width: 30rem;
    margin-left: auto;
    margin-right: auto;
  }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.large-hero__description{
      font-size: 1.875rem
  }
  }
/*
We gave the main '.btn' element the display 'inline-block' because we gave it padding
That way, its parent and surrounding elements will be aware of its vertical padding
*/
.btn{
  background-color: #2f5572;
  color: #FFF;
  text-decoration: none;
  padding: .75rem 1.2rem;
  display: inline-block;
  
}
.btn--orange{
    background-color: #d59541;
  }
.btn--large{
    /* We do not specify any font-size so it will default to 1 for tiny screens*/
    padding: 1.1rem 1.9rem;
    
  }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.btn--large{
      font-size: 1.25rem
    
  }
  }
/*
This file is designed to create padding on each side of the element it is applied to
The main idea is that instead of applying padding to a single element individually,
we use that .wrapper class that will be in charge of centralizing the CSS code
used for applying padding to ANY element (whole page or single item) of the page

On top of adding padding on the left and right side of the screen,
that wrapper class will also take care of limiting the maximum width
so we avoid having very long lines of text to read on larger screen

It also centers the content via margin-left and margin-right set to auto
*/
.wrapper{
    padding-left: 18px;
    padding-right: 18px;
    /*The 'max-width' is applied so we avoid reading very long lines on the screen
    To take the padding from right and left into account so the image breathes better,
    by the way, the author used 1236px (so it takes the 2 times 18px padding added,
    no really useful I think...),
    as I have a smaller screen I will use a lower value instead
    */
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;

    overflow: hidden;
}
/* So we hide the negative -65px margin added to the right */
.wrapper--no-padding-until-medium{
        padding-left: 0;
        padding-right: 0;
    }
@media (min-width: 800px){
.wrapper--no-padding-until-medium{
            padding-left: 18px;
            padding-right: 18px
    }
  }
.wrapper--no-padding-until-large{
        padding-left: 0;
        padding-right: 0;
    }
@media (min-width: 1010px){
.wrapper--no-padding-until-large{
            padding-left: 18px;
            padding-right: 18px
    }
  }
.wrapper--medium{
        /* We make it a bit narrower, (decrease the width) */
        max-width: 976px;
    }
.wrapper--narrow{
        max-width: 470px;
    }
.wrapper .wrapper{
        /*
        We target every wrapper inside another wrapper
        The targeted elements should no longer have horizontal padding
        So it takes the whole sreen's width on mobile devices
        */
        padding-left: 0;
        padding-right: 0;
    }
.wrapper--b-margin{
        margin-bottom: 1rem;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.wrapper--b-margin{
            margin-bottom: 3.875rem
    }
  }
/*
This class will have the responsability of adding top padding
and bottom padding to each section of the page
This is a design pattern that will be resused for several sections
(same as the 'wrapper' section)
*/
.page-section{
    padding: 1.2rem 0;
}
/* For mobile desktop size */
@media (min-width: 800px){
.page-section{
        padding: 4.5rem 0
}
  }
.page-section--no-b-padding-until-medium{
        padding-bottom: 0;
    }
@media (min-width: 800px){
.page-section--no-b-padding-until-medium{
            padding-bottom: 4.5rem
    }
  }
.page-section--no-b-padding-until-large{
        padding-bottom: 0;
    }
@media (min-width: 1010px){
.page-section--no-b-padding-until-large{
            padding-bottom: 4.5rem
    }
  }
.page-section--blue{
        background-color: #2f5572;
        color: #FFF;
    }
.page-section--testimonials{
        /*
        For small size screens, there is no need to use the background image and waste
        the user's data plan, we will just apply a nice background color instead
        */
        background-color: #e0e6ef;
    }
@media (min-width: 1010px){
.page-section--testimonials{
            /* When the element gets lazyloaded by 'lazysizes', we apply the background image */
    }
            .page-section--testimonials.lazyloaded{
                /*
                We tell the image to be aligned towards the top of the section
                as well as center aligned plus no need to be repeated
                */
                background: url(/assets/images/testimonials-bg.jpg) top center no-repeat;
                /*
                'background-size' shrink or stretch the image to always be small or large enough
                to perfectly cover the containing div
                */
                background-size: cover;
            }
  }
.headline{
    font-size: 1.9rem;
    font-weight: 300;
    color: #2f5572;
}
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.headline{
        font-size: 2.875rem
}
  }
.headline--centered{
        text-align: center;
    }
.headline--orange{
        color: #d59541;
    }
.headline--small{
        font-size: 1.2rem;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.headline--small{
            font-size: 1.875rem
    }
  }
.headline--narrow{
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }
.headline--light{
        font-weight: 100;
    }
.headline strong{
        font-weight: 400;
    }
.headline--b-margin-small{
        /* em is relative to the font-size of the element itself */
        margin-bottom: .5em;
    }
.headline--b-margin-large{
        margin-bottom: 1.6em;
    }
.headline--no-t-margin{
        margin-top: 0;
    }
/* This CSS selector will add a blank space after all
    the content in the main 'row' div
    */
.row::after{
    content: "";
    clear: both;
    display: table;     /* For browser support */
  }
.row__b-margin-until-medium{
        margin-bottom: 1rem;
    }
.row--t-padding{
        padding-top: 80px;
    }
@media (min-width: 800px){
.row{

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */

        /* The image takes 1 third of the page */

        /* The image takes 2 third of the page */
}

        .row--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }
        .row--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        .row--gutters-large{
            margin-right: -100px;
        }

        .row--gutters-large > div{
            padding-right: 100px;
        }

        .row--gutters-small{
            margin-right: -45px;
        }

        .row--gutters-small > div{
            padding-right: 45px;
        }

        .row__b-margin-until-medium{
            /*
            When the size is >= to medium, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }
        .row__medium-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;

        }
            
            .row__medium-4--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }
        .row____medium-8{
            float: left;
            width: 66.66%;

        }

            .row____medium-8--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        .row__medium-6{
            float: left;
            width: 50%;
        }
  }
@media (min-width: 1010px){
.row{

        /*
        Gutters here stands for padding
        '> div' selects all direct childrens that use a tag of div which means
        it will target the __4 and __8 divs
        */

        /* The image takes 1 third of the page */

        /* The image takes 2 third of the page */
}

        .row--gutters{
            /*
            This negative margin applied removes the final gutter of 65px at the end
            of the last column
             */
            margin-right: -65px;
        }
        .row--gutters > div {
            /*
            Padding right is useful to create a spacing between each row of the simulated 12 grid
            system
             */
            padding-right: 65px;
            /*
            The 'box-sizing' will cause the extra padding (65px) added not to extend
            the full width of the page since 33.33 + 66.66 already does 99.99% 
            of the page's width

            You don't see any mention of the 'box-sizing' property on this file,
            this is because it is applied globaly in the '_global.css' file,
            developers tend to apply this 'box-sizing' globally
            (which means on every single element of the page) *{box-sizing: border-box}
            */
        }

        .row--gutters-large{
            margin-right: -100px;
        }

        .row--gutters-large > div{
            padding-right: 100px;
        }

        .row--gutters-small{
            margin-right: -45px;
        }

        .row--gutters-small > div{
            padding-right: 45px;
        }

        .row__b-margin-until-large{
            /*
            When the size is >= to large, we remove the extra margin space
            put for mobile devices
             */
            margin-bottom: 0;
        }
        .row__large-4{
            /* Floating an element takes it out of the normal flow of the page */
            /* Therefore, the row element should now how much place it should take */
            /* We need to clear the floats before continuing */
            float: left;
            width: 33.33%;

        }
            
            .row__large-4--larger{
                width: 37%;  /* Because on the design, the image looks a little bigger */
            }
        .row____large-8{
            float: left;
            width: 66.66%;

        }

            .row____large-8--smaller{
                width: 63%;  /* Because on the design, the text looks a little smaller */
            }

        .row__large-6{
            float: left;
            width: 50%;
        }
  }
/* Here, we only target devices that supports flexbox and investigate that
    via Modernizr */
@media (min-width: 800px){
.flexbox .row--equal-height-at-medium{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
  }
/*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */
.flexbox .row--equal-height-at-medium > div{
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }
/* Begin Equal Height Rules */
@media (min-width: 1010px){
.flexbox .row--equal-height-at-large{
            /*
            We want to tell the parent row div to use Flexbox
            But we need to also tell each of the columns to use Flexbox
            instead of being floated to the left, this way,
            the content of each will flex to match the tallest element
            */
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex
    }
  }
/*
        This target all the descendents of 'row--equal-height-at-medium'
        we say here: stop being floated and start using Flexbox instead
        */
.flexbox .row--equal-height-at-large > div{
            float: none;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
        }
/*
    We select each paragrah nested in that 'generic-content-container' element
    */
.generic-content-container p{
        /* There is more space between each line, actually, this property does not require any
        measurement unit like rem, em, px, ... */
        line-height: 1.65;
        margin: 0 0 1.8rem 0;
        font-size: 0.9rem;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.generic-content-container p{
            font-size: 1rem    /* The author applied 1.125rem which is too much for me... */
    }
  }
/*
    For any links that lives in a paragraph
    We could have nested that element into the previous 'p' rule
    (but the author does not like nesting that goes beyond 2 levels)
    */
.generic-content-container p a {
        /* By default, the font-weight is 100 */
        font-weight: 700;
    }
.section-title{
    /* Not the whole title should be bold so we lower the font weight a little */
    font-size: 2.4rem;
    font-weight: 300;
    text-align: center;
}
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.section-title{
        font-size: 3rem
}
  }
.section-title strong{
        font-weight: 500;
    }
.section-title__icon{
        /* 'block' will drop the text to a new line */
        display: block;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: .6rem;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.section-title__icon{
            /* On larger screen, the text will sit next to the image */
            display: inline-block;
            margin-right: .8rem;
            margin-left: 0;
            margin-bottom: 0;
            /* This will push the icon down to 8px */
            position: relative;
            top: 8px
    }
  }
.section-title--blue{
        color: #2f5572;
    }
.section-title--less-margin{
        margin-bottom: 1.3rem;
        margin-top: 0;
    }
.feature-item{
    position: relative;
    padding-bottom: 2.5rem;
}
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.feature-item{
        padding-left: 94px
}
  }
/*
    We want the icon to be positionned in relation to its parent
    so we give the parent a position of 'relative' and the icon
    a position of 'absolute'
    */
.feature-item__icon{
        display: block;
        margin: 0 auto;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.feature-item__icon{
            position: absolute;
            left: 0
    }
  }
.feature-item__title{
        font-weight: 300;
        margin-top: .7rem;
        margin-bottom: .8rem;
        text-align: center;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.feature-item__title{
            font-size: 1.875rem;
            margin-top: 1rem;
            text-align: left
    }
  }
.testimonial{
    /*
    The background color is a bit transparent
    (by the way, the 'a' in 'rgba' stands for alpha transparency)
    */
    background-color: rgba(255, 255, 255, .8);
    padding: 0 18px 1px 18px;
    margin-bottom: 98px;

}
.testimonial--last{
        margin-bottom: 0;
    }
/*
    Why the 1px padding on the bottom of the testimonial section?
    This is because the paragrah contained within a testimonial block has by default
    - a margin-top
    - a margin-bottom
    If we remove that padding, the margin-bottom disappears or in reality
    creates an overlap that goes beyond the white testimonial block and is thus unseen
    so we add some padding to the testimonial so the paragrah has something to push through
    */
@media (min-width: 1010px){
.testimonial{
        margin-bottom: 0;
        padding: 0 1.8125rem 1px 1.8125rem

}
  }
.testimonial__photo{
        border-radius: 80px;
        /*
        'overflow' is hiddent because we only see the left corners of the image getting rounded
        hiding the overflow crop the div to its exact content so we get to see the right hand corners
        */
        overflow: hidden;
        width: 160px;
        height: 160px;
        margin: 0 auto -80px auto;
        position: relative;
        /*
        We want the circle photo to violate the top div border
        but the titles and paragrah within the testimonial section will not move up
        that is why we add a negative '-80px' margin at the bottom of the image
        */
        top: -80px;
        border: 6px solid rgba(255, 255, 255, .8);
    }
.testimonial__title{
        color: #2f5572;
        text-align: center;
        font-size: 1.5rem;
        font-weight: 500;
        margin: 0;
    }
.testimonial__subtitle{
        color: #d59541;
        text-align: center;
        font-weight: 400;
        font-size: 0.9375rem;
        margin: .25rem 0 1rem 0;
    }
/*
The gulp svg sprites package uses the mustache template system
meaning any code included within double braces
                
                ' ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE  ACTUAL CODE '

will be looped through for each icon

(I guess here, 'shapes' is the special keyword used by svg sprites to reference
all shapes and iterate through them here...)

Note that in that file, we will use several variables that seem to come from nowhere
They actually come from the gulp svg sprite package!!
All the info on these variables are at the official GitHub documentation:
https://github.com/jkphl/svg-sprite/blob/master/docs/templating.md

The final processed file (after decoding this file's content) is at:
'./app/temp/sprite/css/sprite.css'
*/
/*
        First, the code put between 
                ' ACTUAL CODE '
        will only be repeated for the first item of the sequence

        This creates a base 'icon' class that has a 'background-image' attribute
        so that this exact same background image corresponding to the same sprite file
        is not repeated over and over so we avoid having for each icons
        something like that:
        icon--star{
            ...
            background-image: url('xyz.svg');
        }
        icon--clear-view-escapes{
            ...
            background-image: url('xyz.svg');
        }
        Instead, we will have:
        .icon
        {
           background-image: url('xyz.svg'); 
        }
        then:
        .icon--star{
            ...
        }
        .icon--clear-view-escapes{
            ...
        }

        We just provide a URL path that points to the svg sprite file
        The 'sprite' variable is responsible for going into the svg folder
        and selecting the sprite file

        The reason we used a variable instead of a hardcoded path is
        because svg sprites tends to add a bunch of randomly generated characters
        to the 'sprite.css' like that: 'sprite.css-69f19c2e.svg'
        everytime a new sprite is generated

        Notice that we used TRIPLE braces, this is because the path contains
        forward slashes and forward slashes are escaped when whitin double braces
        As we do not want them to be escaped, we use TRIPLE slashes to specify the
        variable containing slashes to be as it is
        */
.icon{
            background-image: url('/assets/images/sprites/sprite-e79e95cc.svg');
        }
/*
        Here, we want the PNG copy to be applied
        For that, we will create a filter function we choose to call
        'replaceSvgWithPng' that will either select,
        the SVG or the PNG version depending on browser support in the 'config'
        object of the 'gulp/tasks/sprites.js'
        We will actually call that function in the 'url' path argument,
        more precisely, we will wrap the sprite-e79e95cc.svg variable
        within our filter function
        To do that, we need to enclose the sprite variable with the following syntax:
        
        */
.no-svg .icon{
            background-image: url('/assets/images/sprites/sprite-e79e95cc.png');
        }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--clear-view-escapes {
        width: 144.4px;
        height: 61.53px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 0 0;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--comment {
        width: 66px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 99.71014492753623% 0;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--facebook {
        width: 23.23px;
        height: 44.01px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 26.424310365536293% 45.92133741323979%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--fire {
        width: 58px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 0 99.58035714285714%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--globe {
        width: 66px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 28.019323671497585% 99.58035714285714%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--instagram {
        width: 44.01px;
        height: 44.01px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 63.059522249879905% 49.25740726919919%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--mail {
        width: 66px;
        height: 50px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 0 48.0703125%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--rain {
        width: 66px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 99.71014492753623% 58.92857142857143%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--star {
        width: 66px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 59.90338164251208% 99.58035714285714%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--twitter {
        width: 53.78px;
        height: 44.06px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 94.15199343125627% 98.55159026429745%;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--wifi {
        width: 62px;
        height: 66px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 68.43601895734596% 0;
    }
/*
    We create a new CSS rule here i guess, one per icon (since we loop)
    Each icon has its name, height and width specified automatically
    */
.icon--youtube {
        width: 36.75px;
        height: 44px;
        /*
        That 'background-position' is here to tell each icon its own unique
        X and Y coordinates on the sprite file
        */
        background-position: 37.76931216931217% 45.917910447761194%;
    }
.site-footer{
    background-color: #2f5572;
    color: #FFF;
    padding: .5rem 0;
    text-align: center;
}
/*
    So the Copyright phrase takes the whole width
    */
.site-footer__text{
        display: block;
        margin-bottom: 1rem;
        font-weight: 200;
    }
@media (min-width: 800px){
.site-footer__text{
            display: inline;
            margin-bottom: 0;
            margin-right: 1.4rem
    }
  }
.site-header{
    /*
    We want the header to overlap on the main background image
    Thus, a positon of 'absolute' will take it out of its normal form
    z-index is here to make the header sit on top of the image
    (higher z-index is on top)
    
    For the color, we used the rgba notation with the hexadecimal code
    which is not common but still possible thanks to the NPM
    'postcss-hexrgba' package (do not forget to incorporate that package
    and add it to the array when piping on the 'styles.js' task)

    We also adjust the width since we want the header bar
    to take the whole available width.
    When an element is position absolute, it only takes the width
    corresponding to its content
    */
    position: absolute;
    padding: 10px 0;
    width: 100%;
    z-index: 2;
    /*
    We want the navigation menu background to fade into view gradually
    So we apply a transition to the desired property which is 'background-color'
    We selected the 'ease-out' transition which is nice in that case
    */
    -webkit-transition: background-color .3s ease-out;
    transition: background-color .3s ease-out;

}
@media (min-width: 800px){
.site-header{
        /*
        Setting position to fixed will allow our header to stick when
        we scroll down the page
        */
        position: fixed;
        background-color: rgba(47,85,114, .3)

        /*
        We set a darker background when we scroll down the page for our sticky header
        */

}
        .site-header--dark{
            background-color: rgba(23, 51, 72, .85);
        }
  }
.site-header--is-expanded{
        background-color: rgba(47,85,114, .55);
    }
/*
        The button has to be on the right side
        */
@media (min-width: 800px){
.site-header__btn-container{
            float: right
    }
  }
/*
    We wanted to take the 'Clear View Escapes' logo out of the flow of the page
    which maximum height is determined by the links and the 'Get in Touch' button
    */
.site-header__logo{
        position: absolute;
        background-color: #2f5572;
        padding: 25px 36px;
        top: 0;
        /*
        This will center the logo on mobile devices
        */
        left: 50%;
        -webkit-transform: translateX(-50%) scale(.8);
                transform: translateX(-50%) scale(.8);
        -webkit-transition: -webkit-transform .3s ease-out;
        transition: -webkit-transform .3s ease-out;
        transition: transform .3s ease-out;
        transition: transform .3s ease-out, -webkit-transform .3s ease-out;
        /*
        The scale is here to decrease the logo's size but it will shrink it
        by reference to the center of the image so margin can appear on each side
        of the image
        This is because by default, the 'transform-origin' property was 50% 50%
        We will customize it here, so it shrinks according to the top
        center point of origin
        */
        -webkit-transform-origin: 50% 0%;
                transform-origin: 50% 0%;

    }
@media (min-width: 800px){
.site-header__logo{
            /*
            Then, we need to undo both of these translation and centering properties
            on larger screens
            */
            left: auto;
            -webkit-transform: translateX(0);
                    transform: translateX(0)

            /*
            This selector will target the logo only when the dark header is being used
            This CSS behavior is defined so the logo shrinks slowly to be the exact
            same size as the header bar when we scroll down the page till
            the background header gets darker

            */

    }
            .site-header--dark .site-header__logo{
                -webkit-transform: scale(.56);
                        transform: scale(.56);
            }
  }
.site-header__logo__graphic{
        /*
        If i remember, it is just here to hide the actual text of the div
        containing our SVG logo image...
        */
        text-indent: -9999px;
    }
.site-header__menu-content{
        /*
        We replaced the display: block; with opacity set to 0
        This way the content will still be hidden initially
        but when the modifier class --is-expanded is added,
        we can gradually fade to an opacity of 1

        Even if hidden with an opacity of 0, the user can still click the
        menu and we want to avoid users to be able to click on invisible items
        this is why we added that z-index negative property
        (By the way, using 'z-index' implies setting the position to 'relative')

        In 'transition: all .3s ease-out', 'all' stands for transition
        every property of the element (since we are changing opacity, z-index, ...)
        */
        opacity: 0;
        -webkit-transition: all .3s ease-out;
        transition: all .3s ease-out;
        position: relative;
        z-index: -10;
        -webkit-transform: scale(1.2);
                transform: scale(1.2);  /* We want to zoom in a little bit */
        padding-top: 90px;
        text-align: center;
    }
@media (min-width: 800px){
.site-header__menu-content{
            opacity: 1;     /* Same as before, instead of display block */
            z-index: 1;     /* So it becomes visible then for larger screens */
            padding-top: 0;
            -webkit-transform: scale(1);
                    transform: scale(1)
    }
  }
.site-header__menu-content--is-visible{
            opacity: 1;
            z-index: 1;
            -webkit-transform: scale(1);
                    transform: scale(1);
        }
/*
    We create a little white square that will serve as menu opener on smaller screens
    
    We now we wanted a square (20px by 20px) but we used 19px for the heigh because
    of the resulting hamburger icon where for a weird reason, we had more
    spacing between the middle and the bottom line (1px actually) compared to
    the spacing between the top and the middle bar

    Actually, we created that 3 bars effect based on the 'menu_icon__middle' element
    then we use sudo elements: via 'before' and 'after' and apply
    pretty similar styles
    To summarize, the hamburger menu sicon is created by
    - middle
    - ::before
    - ::after
    */
.site-header__menu-icon{
        width: 20px;
        height: 20px;
        /* We remove the background (square) white color because
        we want a hamburger styled icon */
        /* background-color: #FFF;*/
        position: absolute;
        top: 10px;
        right: 10px;
        /*
        This big 'z-index' is here so the icon has priority and sits always on top
        of the actual menu-content because if we toggle the button and the menu
        opens, the menu will sit on top of the button and we will not be able
        to close it
        */
        z-index: 10;
    }
@media (min-width: 800px){
.site-header__menu-icon{
            /*
            Large screens won't see the icon at all
            */
            display: none
    }
  }
/*
        This code represents the hamburger bars styling of the menu icon
        on smaller screens
        */
.site-header__menu-icon::before{
            /* The 'content' property is here so we ensure the bar is displayed */
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            /*
            We set the bottom left corner to be the transform origin instead
            of the default 50% 50% which is the middle of the bar
            This way, we will have the nice appropriate effect when clicking
            the icon (we want the whole icon to become a cross)
            */
            -webkit-transform-origin: 0 0;
                    transform-origin: 0 0;
            /*
            The 'transition' is here to animate the rotation
            Note that on the top bar, we choose to transition our top bar
            'transform' property
            */
            -webkit-transition: -webkit-transform .3s ease-out;
            transition: -webkit-transform .3s ease-out;
            transition: transform .3s ease-out;
            transition: transform .3s ease-out, -webkit-transform .3s ease-out;
        }
.site-header__menu-icon__middle{
            position: absolute;
            top: 8px;
            left: 0;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            /*
            The 'transition' is here to animate the rotation
            Note that on the middle bar, we choose to transition our top bar
            'opacity' property, (actually, the auther changed it to 'all'
            so it transitions all properties)
            */
            -webkit-transition: all .3s ease-out;
            transition: all .3s ease-out;
            /*
            That effect is very subtle (no problem if you don't get it)
            Here, the author changes the 'transform-origin' for the middle bar
            so when it dissapears, the middle hamburger bar shrinks
            from the right to the left
            Because by default, the transform-origin is set to 50% 50%
            so when the opacity goes null, the element dissapears progressively
            by shrinking from both right and left as if is was burning
            */
            -webkit-transform-origin: 0 50%;
                    transform-origin: 0 50%;
        }
.site-header__menu-icon::after{
            content: "";
            position: absolute;
            left: 0;
            bottom: 1px;
            width: 20px;
            height: 3px;
            background-color: #FFF;
            -webkit-transform-origin: 0 100%;
                    transform-origin: 0 100%;
            /*
            The 'transition' is here to animate the rotation
            Note that on the bottom bar, we choose to transition our top bar
            'transform' property
            */
            -webkit-transition: -webkit-transform .3s ease-out;
            transition: -webkit-transform .3s ease-out;
            transition: transform .3s ease-out;
            transition: transform .3s ease-out, -webkit-transform .3s ease-out;
        }
/*
        We modify the hamburger horizontal bars so it becomes progessively an X
        */
/*
            We target the top horizontal bar here
            We will rotate the bar 45deg clockwise
            The 'scale' is here because even after diagonal rotation,
            the rotated top bar seems too short
            */
.site-header__menu-icon--close-x::before{
                -webkit-transform: rotate(45deg) scale(1.25);
                        transform: rotate(45deg) scale(1.25);
            }
/*
            We used the good old way of selecting elements with the dot '.'
            for simplicity
            Moreover, 'transform: scaleX(0)' is here to shrink the middle bar
            when we click the hamburger icon to open the menu
            */
.site-header__menu-icon--close-x .site-header__menu-icon__middle{
                opacity: 0;
                -webkit-transform: scaleX(0);
                        transform: scaleX(0);
            }
/*
            After that, we need to rotate the bottom bar counter clock wise
            this time
            The 'translateY' is called here become the rotated bottom bar seems
            one pixel higher than the rotated top bar
            */
.site-header__menu-icon--close-x::after{
                -webkit-transform: rotate(-45deg) scale(1.25) translateY(1px);
                        transform: rotate(-45deg) scale(1.25) translateY(1px);
            }
.primary-nav{
    /*
    The 'padding-top' is here to add some spacing between the Get in Touch button
    and the 3 nav links on mobile screens
    */
    padding-top: 10px;

}
@media (min-width: 800px){
.primary-nav{
        padding-top: 0

}
  }
@media (min-width: 800px){
.primary-nav--pull-right{
            float: right
    }
  }
/*
    We target any unordered list that lives within the 'primary-nav' section
    No need for BEM classes, that would be tedious to have block element classes
    for <ul>, <li> and <a> elements
    */
.primary-nav ul{
        margin: 0;
        padding: 0;
    }
.primary-nav ul::after{
    content: "";
    clear: both;
    display: table;     /* For browser support */
  }
/*
    The clearFix is used on the parent element
    */
.primary-nav li{
        list-style: none;   /* No bullets for list items */
        padding-right: 7px;
        display: inline-block;  /* I added it because float: left does not do the desired effect */
    }
/* Plus the author says it horizontally center content... */
@media (min-width: 800px){
.primary-nav li{
            padding-right: 20px;
            float: left;    /* float left will cause each item to float on one line */
            display: block
    }
  }
/*
    To save some spaces on mobile devices, we ommit the padding-right
    of the last <li> element so all 3 links 'Our Beginning Features Testimonials'
    fits into only one line even if the screen size is small
    On desktop screen, we can keep it
    */
.primary-nav li:last-child{
        padding-right: 0;
    }
@media (min-width: 800px){
.primary-nav li:last-child{
            padding-right: 20px
    }
  }
.primary-nav a{
        color: #FFF;
        text-decoration: none;  /* No underline for links */
        font-weight: 300;
        display: block;
        padding: 5px 8px;
        font-size: .8rem;
        background-color: rgba(47,85,114, .5);
    }
@media (min-width: 800px){
.primary-nav a{
            font-size: 1rem;
            padding: 12px 0;
            background-color: transparent
            /*
            We are implementing our desktop stiky header nav link yellow highlighting here
            This selector will only select '<a>' items that have a class of 'is-current-link'
            */
    }
            .primary-nav a.is-current-link{
                color: #faBB69;
            }
  }
.reveal-item{
    /*
    We hide the element
    We will add a nice zoom out effect too
    */
    opacity: 0;
    -webkit-transition: all 1.5s ease-out;
    transition: all 1.5s ease-out;
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
}
.reveal-item--is-visible{
        opacity: 1;
        -webkit-transform: scale(1);
                transform: scale(1);
    }
/*
We want to create a modal that will take the whole available screen
(top, bottom, right and left are set to 0)
And that will be always displayed at first thus the 'fixed' position
(we will then use JavaScript to display it only if the appropriate button
is clicked)

*/
.modal{
    position: fixed;
    z-index: 5;
    background-color: rgba(255, 255, 255, .94);
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    /*
    We hide the modal initially but we can still click the social links so we
    set 'visibility' to 'hidden' to prevent that
    */
    opacity: 0;
    visibility: hidden;
    /*
    We also create a delayed zoom out effect
    */
    -webkit-transform: scale(1.2);
            transform: scale(1.2);
    -webkit-transition: all .3s ease-out;
    transition: all .3s ease-out;
}
.modal--is-visible{
        opacity: 1;
        visibility: visible;
        -webkit-transform: scale(1);
                transform: scale(1);
    }
.modal__inner{
        /*
        Elements that are positionned absolutly try to shrink wrap their size
        but we want the element to keep its full width so we use a width of 100%
        */
        position: absolute;
        width: 100%;
        top: 50%;
        -webkit-transform: translateY(-50%);
                transform: translateY(-50%);
    }
.modal__description{
        text-align: center;
        font-size: 1.3rem;
        font-weight: 300;
        line-height: 1.65;
    }
.modal__close{
        position: absolute;
        top: 15px;
        right: 15px;
        font-size: 2rem;
        /*
        We stretch it a bit so the X looks more like a same width and height X letter,
        We only increase its horizontal size with 'scaleX'
        We increase its size according to its top right hand corner so it
        does not get outside the screen
        */
        -webkit-transform: scaleX(1.2);
                transform: scaleX(1.2);
        -webkit-transform-origin: 100% O;
                transform-origin: 100% O;
        color: #2f5572;
    }
.modal__close:hover{
            color: #d59541;
            cursor: pointer;    /* So we get a hand when hover over the 'X' */
        }
/*
We want the social icons to be horizontally centered on the page
*/
.social-icons{
    text-align: center;

}
/*
    This will target the link '<a>' to give them an orange background
    'inline-block' will allow the icons to sit on a single line
    but 'inline-block' will also allow us to give them a custom height
    if we need to
    */
.social-icons__icon {
        background-color: #d59541;
        display: inline-block;
        margin: 0 5px 5px 5px;
        /*
        'width: 33%;'
        On small screens this way, only 2 icons fit per row
        instead of having 3 on the top line and a single one on the second line
        */
        width: 33%;
        height: 72px;
        position: relative;
    }
/*
  A mixin is just a reusable bit of code
  Inside that mixin, we just say what the mixin should do
  Here, the mixin creates a media query for screen larger than 530px
  */
@media (min-width: 530px){
.social-icons__icon {
            margin: 0 5px;
            /* On larger screens, we can afford having same 'width' and 'height' icons without breaking the design */
            width: 72px
    }
  }
/*
        This will target the <span> with the 'icon' class so the icons
        and ensures that the icons takes some spaces by using a 'block' display
        so they breathe
        */
.social-icons__icon .icon{
            display: block;
            position: absolute;
            left: 50%;
            top: 50%;
            -webkit-transform: translate(-50%, -50%);
                    transform: translate(-50%, -50%);   /* The first coordinate is X and the second Y */
        }
